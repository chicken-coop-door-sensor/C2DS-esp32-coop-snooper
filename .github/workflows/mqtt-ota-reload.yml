name: OTA Reload on Commit

on:
  push:
    branches:
      - main # Adjust this to your branch if necessary

jobs:
  ota_reload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install git-crypt
        run: sudo apt-get install git-crypt

      - name: Unlock git-crypt
        run: |
          echo "${{ secrets.GIT_CRYPT_SNOOPER_KEY }}" | base64 --decode > git-crypt-key
          git-crypt unlock git-crypt-key
          rm git-crypt-key
        working-directory: ${{ github.workspace }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Use Docker image for ESP32 build
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/esp-idf:latest

      - name: Get the current commit hash
        id: vars
        run: echo ::set-output name=sha_short::$(git rev-parse --short HEAD)

      - name: Tag the commit
        run: |
          VERSION_TAG="v1.0.0-${{ steps.vars.outputs.sha_short }}"
          echo "VERSION_TAG=${VERSION_TAG}" >> $GITHUB_ENV

      - name: Build for Tennis House
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace ${{ secrets.DOCKER_USERNAME }}/esp-idf:latest \
            /bin/bash -c ". /opt/esp-idf/export.sh && export CONFIG_TENNIS_HOUSE=1 && idf.py fullclean build"
        working-directory: ${{ github.workspace }}

      - name: Upload Tennis House image to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.AWS_S3_SNOOPER_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          TENNIS_VERSION=$S3_BUCKET_NAME/tennis-house/$VERSION_TAG/firmware.bin
          ehco "TENNIS_VERSION=${TENNIS_VERSION}" >> $GITHUB_ENV
          aws s3 cp build/firmware.bin $TENNIS_VERSION
        working-directory: ${{ github.workspace }}

      - name: Clean build directory
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace ${{ secrets.DOCKER_USERNAME }}/esp-idf:latest \
            /bin/bash -c ". /opt/esp-idf/export.sh && idf.py fullclean"
        working-directory: ${{ github.workspace }}

      - name: Build for Farm House
        run: |
          docker run --rm -v $PWD:/workspace -w /workspace ${{ secrets.DOCKER_USERNAME }}/esp-idf:latest \
            /bin/bash -c ". /opt/esp-idf/export.sh && export CONFIG_FARM_HOUSE=1 && idf.py fullclean build"
        working-directory: ${{ github.workspace }}

      - name: Upload Farm House image to S3
        env:
          S3_BUCKET_NAME: ${{ secrets.AWS_S3_SNOOPER_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          FARM_VERSION=$S3_BUCKET_NAME/farm-house/$VERSION_TAG/firmware.bin
          ehco "FARM_VERSION=${FARM_VERSION}" >> $GITHUB_ENV
          aws s3 cp build/firmware.bin $FARM_VERSION
        working-directory: ${{ github.workspace }}

      - name: Publish MQTT message
        env:
          AWS_IOT_ENDPOINT_URL: ${{ secrets.AWS_IOT_ENDPOINT_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          aws iot-data publish \
            --endpoint-url $AWS_IOT_ENDPOINT_URL \
            --topic "coop/update/snooper" \
            --cli-binary-format raw-in-base64-out \
            --payload '{"tennis-host": "${TENNIS_VERSION}", "farm-host": "${FARM_VERSION}"}'
        working-directory: ${{ github.workspace }}
